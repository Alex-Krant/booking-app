// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  bookings  Booking[]
}

model Studio {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bookings    Booking[]
}

model Formula {
  id          String   @id @default(cuid())
  name        String
  price       Float
  description String?
  isPopular   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bookings    Booking[]
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  studioId  String
  formulaId String
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id])
  studio    Studio   @relation(fields: [studioId], references: [id])
  formula   Formula  @relation(fields: [formulaId], references: [id])
}
